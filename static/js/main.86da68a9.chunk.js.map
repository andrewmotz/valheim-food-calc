{"version":3,"sources":["FoodIcon.module.css","StatBar.module.css","SortPrefernceList.module.css","App.module.css","FoodList.module.css","SelectedFood.module.css","TierIcon.module.css","TierSelector.module.css","FoodItem.js","FoodSorter.js","FoodList.js","PickBest.js","SelectedFood.js","SortPreference.js","StatBar.js","TierIcon.js","TierSelector.js","App.js","fonts/Norse/norse.bold.otf","index.js"],"names":["module","exports","HEALTHSTYLES","background","fill","text","path","stroke","strokeLinecap","trail","STAMINASTLYES","FoodItem","foodObject","largestHP","largestSTAM","foodItemClickHandler","className","styles","foodIconContainer","onClick","nameDiv","itemNameCSS","Name","foodIcon","progressBars","value","HP","maxValue","counterClockwise","circleRatio","strokeWidth","STAM","src","FileName","alt","stats","health","statsum","stamina","uuidv4","sortJSONtoArray","sortPref","tier","jsonArray","Object","values","require","outputArray","i","length","Tier","push","sort","HPcompare","STAMcompare","SUMcompare","NAMEcompare","a","b","aSum","bSum","FoodList","jsonData","parameters","listStyle","map","foodItem","PickBest","pickBestFoodItems","SelectedFood","selectedItems","removeFoodItemClickHandler","jsonFile","main","SortPreference","sortSelection","dropDownRef","useRef","useState","isActive","setActive","selectedSort","setSelectedSort","useEffect","pageClickEvent","e","current","contains","target","window","addEventListener","removeEventListener","ref","DropDownContainer","console","log","listItems","StatBar","color","statValue","maxStatSum","min","classColor","progressBarRed","progressBarYellow","barStyles","barContainer","ProgressBar","now","max","statContainer","TierIcon","setTier","onTierSelect","imgClass","isSelected","TierSelector","currentTier","selectedTiers","setSelectedTier","newSlectedTiers","container","App","setSelectedItems","setParameters","totalStats","setStats","updateTotalStats","addOrSub","newTotalStats","maxTotalHP","maxTotalSTAM","jsonArrayHP","jsonArraySTAM","body","newTier","newParameters","foodobject","index","pop","buttons","newSortPref","food1","food2","food3","addThreeToStats","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86da68a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"foodIconContainer\":\"FoodIcon_foodIconContainer__3h6k1\",\"nameDiv\":\"FoodIcon_nameDiv__1M4en\",\"foodIcon\":\"FoodIcon_foodIcon__2tQJf\",\"health\":\"FoodIcon_health__7uRJX\",\"stamina\":\"FoodIcon_stamina__33tJJ\",\"stats\":\"FoodIcon_stats__2n7I-\",\"itemNameCSS\":\"FoodIcon_itemNameCSS__3xlPT\",\"progressBars\":\"FoodIcon_progressBars__3-k8C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"barStyles\":\"StatBar_barStyles__2hata\",\"statContainer\":\"StatBar_statContainer__nVUpT\",\"barContainer\":\"StatBar_barContainer__3Ni4-\",\"progressBarRed\":\"StatBar_progressBarRed__1LYK8\",\"progressBarYellow\":\"StatBar_progressBarYellow__1lI3T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DropDownContainer\":\"SortPrefernceList_DropDownContainer__O9ff7\",\"listItems\":\"SortPrefernceList_listItems__3joaz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__32uvE\",\"buttons\":\"App_buttons__3-FKl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listStyle\":\"FoodList_listStyle__2RmvK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"SelectedFood_main__3r6j_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"TierIcon_main__3-Yru\",\"visible\":\"TierIcon_visible__2W9hp\",\"invisible\":\"TierIcon_invisible__2Q7Kj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TierSelector_container__1msod\"};","import React from \"react\";\r\nimport styles from './FoodIcon.module.css';\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport { v4 as uuidv4 } from 'uuid'; //This is so jsx doesnt get mad, when the list is made in a loop, it should have a unique key\r\n\r\n//style object for the health bar\r\nconst HEALTHSTYLES = {\r\n    background: {\r\n      fill: \"#3e98c7\"\r\n    },\r\n    text: {\r\n      fill: \"#FF0\"\r\n    },\r\n    path: {\r\n      stroke: \"#FF0000\",\r\n      strokeLinecap: \"BUTT\"\r\n    },\r\n    trail: { stroke: \"transparent\" }\r\n  }\r\n\r\n  //style object for the stamina bar\r\n  const STAMINASTLYES = {\r\n    background: {\r\n      fill: \"#3e98c7\"\r\n    },\r\n    text: {\r\n      fill: \"#FF0\"\r\n    },\r\n    path: {\r\n      stroke: \"#EBFF19\",\r\n      strokeLinecap: 'butt'\r\n    },\r\n    trail: { stroke: \"transparent\" }\r\n  }\r\n\r\n\r\n\r\nexport default function FoodItem(foodObject, largestHP, largestSTAM, foodItemClickHandler){\r\n      //Clicker handler\r\n      function handleOnClick(){\r\n        foodItemClickHandler(foodObject);\r\n      }\r\n\r\n    return (\r\n        <div key={uuidv4()} className={styles.foodIconContainer} onClick={handleOnClick}>\r\n            <div className={styles.nameDiv}>\r\n              <p className={styles.itemNameCSS}>{foodObject.Name}</p>\r\n            </div>\r\n            <div className={styles.foodIcon}>\r\n              {/* Div for the progress bars */}\r\n                <div className={styles.progressBars}>\r\n                    <CircularProgressbar value = {foodObject.HP} maxValue={largestHP} \r\n                        counterClockwise={true} circleRatio={.5} styles={HEALTHSTYLES} strokeWidth={5}/>\r\n                    <CircularProgressbar value = {foodObject.STAM} maxValue={largestSTAM} \r\n                        circleRatio={.5} styles= {STAMINASTLYES} strokeWidth={5}/>\r\n                </div>\r\n\r\n                <img src={foodObject.FileName} alt= {foodObject.Name}/>\r\n\r\n                {/* HP, SUM, and Stamina Numbers */}\r\n                <div className = {styles.stats}>\r\n                    <p className={styles.health}>{foodObject.HP}</p>\r\n                    <p className={styles.statsum}>{foodObject.HP + foodObject.STAM} </p>\r\n                    <p className={styles.stamina}>{foodObject.STAM}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","//Code for some the same functionaly used in multiple places.\r\n\r\nfunction sortJSONtoArray(sortPref, tier){\r\n    let jsonArray = Object.values(require(\"./FoodItems.json\"));\r\n    let outputArray = [];\r\n\r\n    //Only add elements by the correct tier\r\n    for(let i = 0; i < jsonArray.length; i++){\r\n        if(jsonArray[i].Tier <= tier)\r\n            outputArray.push(jsonArray[i]);\r\n    }\r\n    //Sort the Array\r\n    if (sortPref === \"HP\")\r\n        outputArray.sort(HPcompare);\r\n    else if (sortPref === \"STAM\")\r\n        outputArray.sort(STAMcompare);\r\n    else if (sortPref === \"SUM\")\r\n        outputArray.sort(SUMcompare);\r\n    else if (sortPref === \"NAME\")\r\n        outputArray.sort(NAMEcompare);\r\n\r\n    return outputArray\r\n} export default sortJSONtoArray;\r\n\r\n\r\n//Sorter helpers\r\nfunction HPcompare(a, b){\r\n    if(a.HP < b.HP)\r\n        return 1;\r\n    if(a.HP > b.HP)\r\n        return -1;\r\n    return 0;\r\n}\r\n\r\n//Sort by Stamina\r\nfunction STAMcompare(a, b){\r\n    if(a.STAM < b.STAM)\r\n        return 1;\r\n    if(a.STAM > b.STAM)\r\n        return -1;\r\n    return 0;\r\n}\r\n\r\n//Sort by HP + Stamina\r\nfunction SUMcompare(a, b){\r\n    let aSum = a.HP + a.STAM;\r\n    let bSum = b.HP + b.STAM;\r\n\r\n    if(aSum < bSum)\r\n        return 1;\r\n    if(aSum > bSum)\r\n        return -1;\r\n    return 0;\r\n}\r\n\r\n//Sort by Name\r\nfunction NAMEcompare(a, b){\r\n    if(a.Name < b.Name)\r\n        return -1;\r\n    if(a.Name > b.Name)\r\n        return 1;\r\n    return 0;\r\n}\r\n","import React from \"react\";\r\nimport styles from './FoodList.module.css';\r\nimport FoodItem from \"./FoodItem\";\r\nimport sortJSONtoArray from \"./FoodSorter.js\";\r\n\r\nexport default function FoodList(jsonData, parameters, foodItemClickHandler){\r\n    let jsonArray = Object.values(jsonData);\r\n    let largestHP = 0;\r\n    let largestSTAM = 0;\r\n    \r\n    //Create a sorted array based off set sort parameter\r\n    let outputArray = sortJSONtoArray(parameters[1], parameters[0]);\r\n\r\n    //Loop through the json to find largest HP/STAM values\r\n    for(let i = 0; i < jsonArray.length; i++){\r\n        //Find the largest HP and Stamina values to set the hp/stam bars limit\r\n        if(jsonArray[i].HP > largestHP)\r\n            largestHP = jsonArray[i].HP;\r\n\r\n        if(jsonArray[i].STAM > largestSTAM)\r\n            largestSTAM = jsonArray[i].STAM;\r\n    }\r\n\r\n    //Return the data from the output array\r\n    return (\r\n        <div className={styles.listStyle}>\r\n        {outputArray.map(foodItem => {\r\n            return FoodItem(foodItem, largestHP, largestSTAM, foodItemClickHandler);\r\n        })}\r\n        </div>\r\n    )\r\n}\r\n\r\n//Returns all the possible methods that a object has, used for Andrews debugging\r\n// function getAllMethods(obj) {\r\n//     return Object.keys(obj)\r\n//         .filter((key) => typeof obj[key] === 'function')\r\n//         .map((key) => obj[key]);\r\n// }","import React from \"react\";\r\nimport sortJSONtoArray from \"./FoodSorter.js\";\r\n\r\nexport default function PickBest({pickBestFoodItems, parameters}){\r\n    let jsonArray = sortJSONtoArray(parameters[1], parameters[0]);\r\n\r\n\r\n    function onPickBestClick(){\r\n        pickBestFoodItems(jsonArray[0],jsonArray[1],jsonArray[2])\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={onPickBestClick}>Pick for Me</div>\r\n        </>\r\n    )\r\n    \r\n}\r\n\r\n","import React from \"react\";\r\nimport FoodItem from \"./FoodItem\";\r\nimport styles from \"./SelectedFood.module.css\";\r\n\r\nexport default function SelectedFood({selectedItems, removeFoodItemClickHandler, jsonFile}){\r\n\r\n    //Sad I have to do this again\r\n    let jsonArray = Object.values(jsonFile);\r\n    let largestHP = 0;\r\n    let largestSTAM = 0;\r\n\r\n    for(let i = 0; i < jsonArray.length; i++){\r\n        //Find the largest HP and Stamina values to set the hp/stam bars limit\r\n        if(jsonArray[i].HP > largestHP)\r\n            largestHP = jsonArray[i].HP;\r\n\r\n        if(jsonArray[i].STAM > largestSTAM)\r\n            largestSTAM = jsonArray[i].STAM;\r\n    }\r\n    //End of sad\r\n\r\n    // console.log(\"Selected Items\");\r\n    // console.log(selectedItems);\r\n\r\n    return (\r\n        <>\r\n        <div className={styles.main}>\r\n            {selectedItems.map(foodItem => {\r\n                return FoodItem(foodItem, largestHP, largestSTAM, removeFoodItemClickHandler);\r\n            })}\r\n        </div>\r\n        </>\r\n    )\r\n}","import React, { useState, useRef, useEffect } from \"react\";\r\nimport styles from \"./SortPrefernceList.module.css\";\r\n\r\nexport default function SortPreference({sortSelection}){\r\n    const dropDownRef = useRef(null);\r\n    const [isActive, setActive] = useState(false);\r\n    const [selectedSort, setSelectedSort] = useState(\"Health\");\r\n\r\n    //Code that looks if the user clicked out of the dropdwon and closes it if true\r\n    useEffect(()=>{\r\n        //code that runs once the page is clicked\r\n        const pageClickEvent = (e) =>{\r\n            //If not click on the dropdown, toggled the isActive state\r\n            if(dropDownRef.current != null && !dropDownRef.current.contains(e.target)){\r\n                setActive(!isActive);\r\n            }\r\n        }\r\n        //Add event listener once dropdown is clicked\r\n        if(isActive){\r\n            window.addEventListener('click', pageClickEvent);\r\n        }\r\n        //Remove the event listener when the dropdown is closed\r\n        return () => {\r\n            window.removeEventListener('click', pageClickEvent);\r\n        }\r\n    }, [isActive])\r\n\r\n    //Toggles the dropdown\r\n    function dropDownPressed(){\r\n        setActive(!isActive);\r\n        console.log(\"boop\");\r\n    }\r\n\r\n    //Set prefernce to heatlh\r\n    function setSortHealth(){\r\n        sortSelection(\"HP\");\r\n        setSelectedSort(\"Health\");\r\n    }\r\n    //Set prefernce to Stamina\r\n    function setSortStamina(){\r\n        sortSelection(\"STAM\");\r\n        setSelectedSort(\"Stamina\");\r\n    }\r\n    //Set prefernce to HP+STAM\r\n    function setSortSUM(){\r\n        sortSelection(\"SUM\");\r\n        setSelectedSort(\"HP+STAM\");\r\n    }\r\n    //Set prefernce to Alphabetical\r\n    function setSortName(){\r\n        sortSelection(\"NAME\");\r\n        setSelectedSort(\"Name\");\r\n    }\r\n\r\n    return (\r\n        <div ref={dropDownRef} className={styles.DropDownContainer}>\r\n            <div onClick={dropDownPressed}>\r\n                { selectedSort }\r\n            </div>\r\n\r\n            {isActive && //runs if active is true\r\n                <ul className={styles.listItems}>\r\n                    <li onClick={setSortHealth}>Health</li>\r\n                    <li onClick={setSortStamina}>Stamina</li>\r\n                    <li onClick={setSortSUM}>HP+STAM</li>\r\n                    <li onClick={setSortName}>A-&gt;Z</li>\r\n                </ul>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport ProgressBar  from \"react-bootstrap/ProgressBar\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport styles from \"./StatBar.module.css\";\r\n\r\n\r\nexport default function StatBar({color,statValue,maxStatSum,min}){\r\n\r\n    let classColor = styles.progressBarRed;\r\n\r\n    if(color === \"Yellow\"){\r\n        classColor = styles.progressBarYellow;\r\n    }\r\n\r\n    return (\r\n        <div className={styles.barStyles}>\r\n            <div className={styles.barContainer}>\r\n                <ProgressBar className={classColor} now={min + statValue} max={maxStatSum + min} min={0}/>\r\n            </div>\r\n            <div className={styles.statContainer}>\r\n                { min + statValue}\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"./TierIcon.module.css\";\r\n\r\nexport default function TierIcon({setTier, onTierSelect, tier, isSelected}){\r\n    let imgClass = isSelected? \"visible\" : \"invisible\";\r\n\r\n    function onTierClick(){\r\n        setTier(tier);\r\n        onTierSelect(tier);\r\n    }\r\n\r\n    return (\r\n        <div onClick={onTierClick} className={styles.main}>\r\n            <p>{tier}</p>\r\n            <img className={imgClass} src=\"tier_icon.png\" alt=\"Tier Icon\"/>\r\n        </div>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport TierIcon from \"./TierIcon\";\r\nimport styles from \"./TierSelector.module.css\";\r\n\r\n\r\nexport default function TierSelector({setTier, currentTier}){\r\n    const [selectedTiers, setSelectedTier] = useState([true, false, false, false]);\r\n\r\n    function onTierSelect(tier){\r\n        let newSlectedTiers = [false, false, false, false];\r\n        newSlectedTiers[tier-1] = true;\r\n        setSelectedTier(newSlectedTiers);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <TierIcon setTier={setTier} onTierSelect={onTierSelect} tier={1} isSelected={selectedTiers[0]}/>\r\n            <TierIcon setTier={setTier} onTierSelect={onTierSelect} tier={2} isSelected={selectedTiers[1]}/>\r\n            <TierIcon setTier={setTier} onTierSelect={onTierSelect} tier={3} isSelected={selectedTiers[2]}/>\r\n            <TierIcon setTier={setTier} onTierSelect={onTierSelect} tier={4} isSelected={selectedTiers[3]}/>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport FoodList from \"./FoodList\";\r\nimport PickBest from \"./PickBest\";\r\nimport SelectedFood from \"./SelectedFood\";\r\nimport SortPreference from \"./SortPreference\";\r\nimport StatBar from \"./StatBar\";\r\nimport sortJSONtoArray from \"./FoodSorter.js\";\r\nimport TierSelector from \"./TierSelector\";\r\nimport styles from \"./App.module.css\";\r\n\r\n\r\nfunction App() {\r\n  let jsonFile = require(\"./FoodItems.json\");\r\n\r\n  //Reacts fancy state usage, kinda black magic to me but needed in order for stuff to update on page\r\n  const [selectedItems, setSelectedItems] = useState([]); //Can set the default selected items, current set to nothing\r\n  const [parameters, setParameters] = useState([1, \"HP\"]); // Default sort tier, default sorting preference\r\n  const [totalStats, setStats] = useState([0,0]);\r\n  \r\n  //Called when a item is clicked on in the food list\r\n  function addFoodItemClickHandler(foodobject){\r\n    if(selectedItems.length < 3 && !selectedItems.includes(foodobject)){\r\n      setSelectedItems([...selectedItems,foodobject]);\r\n      updateTotalStats('+',foodobject);\r\n    }\r\n  }\r\n\r\n  function pickBestFoodItems(food1, food2, food3){\r\n    addThreeToStats(food1, food2, food3);\r\n    setSelectedItems([food1, food2, food3]);\r\n  }\r\n\r\n  //Called when items are clicked on in the selected items list\r\n  function removeFoodItemClickHandler(foodobject){\r\n    let index = 0;\r\n    updateTotalStats('-',foodobject);\r\n    // let tempFoodItem = null;\r\n    for(let i = 0; i < selectedItems.length; i++){\r\n      if(selectedItems[i] === foodobject)\r\n        index = i;\r\n    }\r\n    selectedItems[index] = selectedItems[selectedItems.length - 1]; // TODO FIX\r\n    selectedItems.pop();\r\n    setSelectedItems([...selectedItems]);\r\n  }\r\n\r\n  //Called by the dropdown list to set the new sorting preference\r\n  function sortSelection(newSortPref){\r\n    let newParameters = [...parameters];\r\n    newParameters[1] = newSortPref;\r\n    setParameters(newParameters);\r\n  }\r\n\r\n  //Used to update the totalStats\r\n  function updateTotalStats(addOrSub, foodObject){\r\n    let newTotalStats = [...totalStats];\r\n    if(addOrSub === '+'){\r\n      newTotalStats[0] += foodObject.HP;\r\n      newTotalStats[1] += foodObject.STAM;\r\n    } \r\n    else {\r\n      newTotalStats[0] -= foodObject.HP;\r\n      newTotalStats[1] -= foodObject.STAM;\r\n    }\r\n    setStats(newTotalStats);\r\n  }\r\n  function addThreeToStats(food1, food2, food3){\r\n    let newTotalStats = [0,0];\r\n    newTotalStats[0] += food1.HP + food2.HP + food3.HP;\r\n    newTotalStats[1] += food1.STAM + food2.STAM + food3.STAM;\r\n    setStats(newTotalStats);\r\n  }\r\n\r\n  //Called by the tier selector\r\n  function setTier(newTier){\r\n    let newParameters = [...parameters];\r\n    newParameters[0] = newTier;\r\n    setParameters(newParameters);\r\n  }\r\n\r\n  //Find the largest possible value for health and stamina for the bars\r\n  let maxTotalHP = 0;\r\n  let maxTotalSTAM = 0;\r\n  let jsonArrayHP = sortJSONtoArray(\"HP\", 4);\r\n  let jsonArraySTAM = sortJSONtoArray(\"STAM\", 4);\r\n\r\n  maxTotalHP = jsonArrayHP[0].HP + jsonArrayHP[1].HP + jsonArrayHP[2].HP;\r\n  maxTotalSTAM = jsonArraySTAM[0].STAM + jsonArraySTAM[1].STAM + jsonArraySTAM[2].STAM;\r\n\r\n  return (\r\n    <div className={styles.body}>\r\n      <h1> Valheim Food Calculator </h1>\r\n      <div>\r\n        <p>Tier Selection</p>\r\n        <TierSelector setTier={setTier} currentTier={parameters[0]}/>\r\n      </div>\r\n      <div>\r\n        <StatBar color=\"RED\" statValue={totalStats[0]} maxStatSum={maxTotalHP} min={25}/>\r\n        <StatBar color=\"Yellow\" statValue={totalStats[1]} maxStatSum={maxTotalSTAM} min={50}/>\r\n        {/* <progress value=\"50\" max=\"200\"/> */}\r\n      </div>\r\n      <SelectedFood selectedItems={selectedItems} removeFoodItemClickHandler={removeFoodItemClickHandler} jsonFile={jsonFile}/>\r\n      <div className={styles.buttons}>\r\n        <SortPreference sortSelection={sortSelection}/>\r\n        <PickBest pickBestFoodItems={pickBestFoodItems} parameters={parameters}/>\r\n      </div>\r\n      { FoodList(jsonFile, parameters, addFoodItemClickHandler) }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","export default __webpack_public_path__ + \"static/media/norse.bold.5efe60ef.otf\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './fonts/Norse/norse.bold.otf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}